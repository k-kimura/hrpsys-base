/**
 * @file PushRecoverService.idl
 * @brief Services for tendon joint controlling interface
 */
//#include "OpenHRPCommon.idl"
module OpenHRP
{
  interface PushRecoverService
  {
      typedef sequence<string> sSequence;
      typedef sequence<double> dSequence;
      typedef double DblArray3[3];

      struct PushDetectParam
      {
          double diff_margin_threshold_x;
          double diff_margin_threshold_y;
          double body_compliance_k1;
          double body_compliance_k2;
          double body_compliance_k3;
          double x_gain_0;
          double x_gain_1;
          double dx_gain_0;
          double dx_gain_1;
      };

      struct OnlineWalkParam
      {
          double filter_fp;
          double lpf_fp;
          double modify_rot_gain_x;
          double modify_rot_gain_y;
          double fz_contact_threshold_upper;
          double fz_contact_threshold_lower;
          double foot_roll_gain;
          double foot_pitch_gain;
          double body_roll_gain;
          double body_pitch_gain;

          long owpg_step_time;
          long owpg_step_margin;
          long owpg_max_calclen; /* defines how long IWG generates trajectory */
          long owpg_iterate_num; /* defines how many times IWG calc trajectory modification */
          double owpg_feedback_gain;
          double owpg_zmp_modify_x_max;
          double owpg_zmp_modify_y_max;
          double owpg_xstep_max;
          double owpg_ystep_max;
          double owpg_rot_offset_threshold_x;
          double owpg_rot_offset_threshold_y;
          double owpg_rot_offset_gain_x;
          double owpg_rot_offset_gain_y;
          double owpg_x_offset_threshold_x;
          double owpg_x_offset_threshold_y;
          double owpg_x_offset_gain_x;
          double owpg_x_offset_gain_y;
          double owpg_Dx_offset_threshold_x;
          double owpg_Dx_offset_threshold_y;
          double owpg_Dx_offset_gain_x;
          double owpg_Dx_offset_gain_y;
          double owpg_Dx_offset_acc_thre;
          double owpg_modify_first_magnity;

          boolean enable;
          long    datal;
          double  dataf;
      };

      struct WheelControllerParam
      {
          long      id;
          boolean   enable;
          double odom;
          double pgain;
          double dgain;
          double thgain;
          double phigain;
          double dthgain;
          double dphigain;
          DblArray3 imu_offset;
      };

      struct WheelControllerParamSet
      {
          long                           drivenum;
          sequence<WheelControllerParam> param;
          long   datal;
          double dataf;
          DblArray3 imu_zero;
          boolean complementary_filter_reset;
          double complementary_filter_pitch;
          boolean phi_reset;
      };

      boolean dummy(in double a);

      /**
       * @brief Shift to PushRecoveryReady mode.
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean startPushRecovery();

      /**
       * @brief Shift to PassThrough mode.
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean stopPushRecovery();

      /**
       * @brief start logging on pr RTC
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean startLogging();

      /**
       * @brief stop logging on pr RTC
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean stopLogging();

      /**
       * @brief Stop stepping immediately.
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean emergencyStop();

      /**
       * @brief Enable push detection
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean enablePushDetect();

      /**
       * @brief disable push detection
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean disablePushDetect();

      /**
       * @brief Set Push Detect Param
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean setPushDetectParam(in PushDetectParam i_param);

      /**
       * @brief Get Push Detect Param
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean getPushDetectParam(out PushDetectParam o_param);

      /**
       * @brief Set Push Detect Param
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean setOnlineWalkParam(in OnlineWalkParam i_param);

      /**
       * @brief Get Push Detect Param
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean getOnlineWalkParam(out OnlineWalkParam o_param);

      /**
       * @brief Set Wheel control mode
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean setWheelMode(in long mode);

      /**
       * @brief Set wheel controller Param
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean setWheelControllerParam(in WheelControllerParamSet i_param);

      /**
       * @brief Get wheel Controller Param
       * @param
       * @return true if set successfully, false otherwise
       */
      boolean getWheelControllerParam(out WheelControllerParamSet o_param);
  };
};
